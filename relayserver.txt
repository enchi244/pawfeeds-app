const express = require('express');
const http = require('http');
const WebSocket = require('ws');
// Corrected import for node-fetch
const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));


const PORT = process.env.PORT || 8080;

// --- IMPORTANT: CONFIGURE YOUR CAMERA IPs HERE ---
const CAMERA_IPS = {
  1: 'http://192.168.1.101', // IP for Bowl 1 Camera
  2: 'http://192.168.1.102', // IP for Bowl 2 Camera
};
// ------------------------------------------------

const app = express();
const server = http.createServer(app);
const wss = new WebSocket.Server({ server });

console.log(`[PawFeeds Relay] Server is starting...`);

app.get('/stream/:bowlNumber', async (req, res) => {
  const { bowlNumber } = req.params;
  const cameraIp = CAMERA_IPS[bowlNumber];

  if (!cameraIp) {
    console.error(`[Relay] HTTP: No camera configured for bowl number: ${bowlNumber}`);
    return res.status(404).send(`Camera for bowl ${bowlNumber} not found.`);
  }

  const streamUrl = `${cameraIp}/stream`;
  console.log(`[Relay] HTTP: Client connected for Bowl ${bowlNumber}. Relaying from: ${streamUrl}`);

  try {
    const cameraResponse = await fetch(streamUrl);

    if (!cameraResponse.ok) {
      throw new Error(`Camera responded with status: ${cameraResponse.status}`);
    }

    res.writeHead(200, {
      'Content-Type': 'multipart/x-mixed-replace; boundary=--FRAME',
      'Connection': 'close',
      'Cache-Control': 'no-cache',
      'Pragma': 'no-cache',
      'Expires': 0,
    });

    cameraResponse.body.pipe(res);

  } catch (error) {
    console.error(`[Relay] HTTP: Failed to connect to camera for Bowl ${bowlNumber}:`, error.message);
    res.status(500).send(`Failed to connect to stream for Bowl ${bowlNumber}.`);
  }
});


wss.on('connection', (ws, req) => {
  console.log('[Relay] WebSocket client connected (for potential future use).');
  
  ws.on('close', () => {
    console.log('[Relay] WebSocket client disconnected.');
  });
});

server.listen(PORT, () => {
  console.log(`[PawFeeds Relay] Server listening on port ${PORT}`);
});